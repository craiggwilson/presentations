1) Create interface IContainer
2) Test and implemenent
	- In_the_context_of_resolving_by_type
	- when_the_type_is_resolvable
3) Test and implement
	- when_an_instance_of_a_type_was_registered
	- split up interface to IRegistrar and IResolver
4) Test and implement
	- when_the_type_has_dependencies
	- Discuss possible strategies: Most Parameters?, Most Resolvable Parameters?
5) Talk about ownership
	- Discuss possible strategies: external, internal
6) Talk about lifetimes
	- Singleton, Transient, PerRequest
	a) Test and implement singleton
	b) Test and implement transient
	c) bring in a mocking framework
	d) reimplement container to use lifetimes
7) Mixing Metaphors: Lifetimes are intermingled with activation
	- what if a desired singleton isn't provided as an instance?
	a) Introduce a resolution context
	b) Introduce a registration class
	c) fix tests
	d) syntactic sugar